# generated by datamodel-codegen:
#   filename:  api_audit.json
#   timestamp: 2021-07-18T15:28:11+00:00

from __future__ import annotations

from typing import List, Optional

from pydantic import BaseModel, Field, constr


class Client(BaseModel):
    start: Optional[str] = Field(
        None, description="Timestamp when the client connected"
    )
    stop: Optional[str] = Field(
        None, description="Timestamp when the client disconnected"
    )
    host: Optional[str] = Field(
        None, description="The remote host the client is connected from"
    )
    id: Optional[str] = Field(
        None, description="The internally assigned client ID for this connection"
    )
    acc: str = Field(..., description="The account this user logged in to")
    user: Optional[str] = Field(None, description="The clients username")
    name: Optional[str] = Field(
        None, description="The name presented by the client during connection"
    )
    lang: Optional[str] = Field(
        None, description="The programming language library in use by the client"
    )
    ver: Optional[str] = Field(
        None, description="The version of the client library in use"
    )
    rtt: Optional[float] = Field(
        None,
        description="The last known latency between the NATS Server and the Client in nanoseconds",
    )
    server: Optional[str] = Field(
        None, description="The server that the client was connected to"
    )
    cluster: Optional[str] = Field(
        None, description="The cluster name the server is connected to"
    )
    jwt: Optional[str] = Field(None, description="The JWT presented in the connection")
    issuer_key: Optional[str] = Field(
        None,
        description="The public signing key or account identity key used to issue the user",
    )
    name_tag: Optional[str] = Field(
        None, description="The name extracted from the user JWT claim"
    )
    tags: Optional[List[str]] = Field(None, description="Tags extracted from the JWT")


class IoNatsJetstreamAdvisoryV1ApiAudit(BaseModel):
    type: str
    id: str = Field(..., description="Unique correlation ID for this event")
    timestamp: str = Field(
        ..., description="The time this event was created in RFC3339 format"
    )
    server: constr(min_length=1) = Field(
        ...,
        description="The server this event originates from, either a generated ID or the configured name",
    )
    subject: constr(min_length=1) = Field(
        ..., description="The subject the admin API request was received on"
    )
    response: str = Field(
        ..., description="The full unparsed body of the response sent to the caller"
    )
    request: Optional[str] = Field(
        None,
        description="The full unparsed body of the request received from the client",
    )
    client: Client = Field(
        ..., description="Details about the client that connected to the server"
    )
