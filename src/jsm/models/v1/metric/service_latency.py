# generated by datamodel-codegen:
#   filename:  service_latency.json
#   timestamp: 2021-07-18T15:28:18+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field


class Requestor(BaseModel):
    start: Optional[str] = Field(
        None, description="Timestamp when the client connected"
    )
    stop: Optional[str] = Field(
        None, description="Timestamp when the client disconnected"
    )
    host: Optional[str] = Field(
        None, description="The remote host the client is connected from"
    )
    id: Optional[str] = Field(
        None, description="The internally assigned client ID for this connection"
    )
    acc: str = Field(..., description="The account this user logged in to")
    user: Optional[str] = Field(None, description="The clients username")
    name: Optional[str] = Field(
        None, description="The name presented by the client during connection"
    )
    lang: Optional[str] = Field(
        None, description="The programming language library in use by the client"
    )
    ver: Optional[str] = Field(
        None, description="The version of the client library in use"
    )
    rtt: Optional[float] = Field(
        None,
        description="The last known latency between the NATS Server and the Client in nanoseconds",
    )
    server: Optional[str] = Field(
        None, description="The server that the client was connected to"
    )
    cluster: Optional[str] = Field(
        None, description="The cluster name the server is connected to"
    )
    jwt: Optional[str] = Field(None, description="The JWT presented in the connection")
    issuer_key: Optional[str] = Field(
        None,
        description="The public signing key or account identity key used to issue the user",
    )
    name_tag: Optional[str] = Field(
        None, description="The name extracted from the user JWT claim"
    )
    tags: Optional[List[str]] = Field(None, description="Tags extracted from the JWT")


class Responder(BaseModel):
    start: Optional[str] = Field(
        None, description="Timestamp when the client connected"
    )
    stop: Optional[str] = Field(
        None, description="Timestamp when the client disconnected"
    )
    host: Optional[str] = Field(
        None, description="The remote host the client is connected from"
    )
    id: Optional[str] = Field(
        None, description="The internally assigned client ID for this connection"
    )
    acc: str = Field(..., description="The account this user logged in to")
    user: Optional[str] = Field(None, description="The clients username")
    name: Optional[str] = Field(
        None, description="The name presented by the client during connection"
    )
    lang: Optional[str] = Field(
        None, description="The programming language library in use by the client"
    )
    ver: Optional[str] = Field(
        None, description="The version of the client library in use"
    )
    rtt: Optional[float] = Field(
        None,
        description="The last known latency between the NATS Server and the Client in nanoseconds",
    )
    server: Optional[str] = Field(
        None, description="The server that the client was connected to"
    )
    cluster: Optional[str] = Field(
        None, description="The cluster name the server is connected to"
    )
    jwt: Optional[str] = Field(None, description="The JWT presented in the connection")
    issuer_key: Optional[str] = Field(
        None,
        description="The public signing key or account identity key used to issue the user",
    )
    name_tag: Optional[str] = Field(
        None, description="The name extracted from the user JWT claim"
    )
    tags: Optional[List[str]] = Field(None, description="Tags extracted from the JWT")


class Status(Enum):
    integer_200 = 200
    integer_400 = 400
    integer_408 = 408
    integer_503 = 503
    integer_504 = 504


class IoNatsServerMetricV1ServiceLatency(BaseModel):
    type: str
    id: str = Field(..., description="Unique correlation ID for this event")
    timestamp: str = Field(
        ..., description="The time this event was created in RFC3339 format"
    )
    requestor: Optional[Requestor] = Field(
        None, description="Details about the service requestor"
    )
    responder: Optional[Responder] = Field(
        None, description="Details about the service responder"
    )
    header: Optional[Dict[str, Any]] = Field(
        None,
        description="When header based latency is enabled, the headers that triggered the event",
    )
    status: Status = Field(
        ...,
        description="The status of the request. 200 OK, 400 Bad Request, no reply subject. 408 Request Timeout, requester lost interest before request completed. 503 Service Unavailable. 504 Service Timeout.",
    )
    error: Optional[str] = Field(
        None, description="A description of the status code when not 200"
    )
    start: str = Field(
        ..., description="The time the request started in RFC3339 format"
    )
    service: int = Field(
        ...,
        description="The time taken by the service to perform the request in nanoseconds",
    )
    system: int = Field(
        ..., description="Time spend traversing the NATS network in nanoseconds"
    )
    total: int = Field(..., description="The overall request duration in nanoseconds")
